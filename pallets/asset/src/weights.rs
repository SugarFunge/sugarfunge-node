
//! Autogenerated weights for `sugarfunge_asset`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-09, STEPS: `5`, REPEAT: `5`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `mauricio-HP-Pavilion-15-Notebook-PC`, CPU: `Intel(R) Core(TM) i5-4210U CPU @ 1.70GHz`
//! EXECUTION: ``, WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain
// dev
// --wasm-execution=compiled
// --pallet
// sugarfunge-asset
// --extrinsic
// *
// --steps
// 5
// --repeat
// 5
// --output
// pallets/all-weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn create_class() -> Weight;
	fn create_asset() -> Weight;
	fn mint() -> Weight;
	fn batch_mint() -> Weight;
	fn burn() -> Weight;
	fn batch_burn() -> Weight;
	fn transfer_from() -> Weight;
	fn batch_transfer_from() -> Weight;
	fn update_class_metadata() -> Weight;
	fn update_asset_metadata() -> Weight;
}

/// Weight functions for `sugarfunge_asset`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Asset::Classes` (r:1 w:1)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	fn create_class() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `7619`
		// Minimum execution time: 109_033_000 picoseconds.
		Weight::from_parts(116_964_000, 0)
			.saturating_add(Weight::from_parts(0, 7619))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Asset::Classes` (r:1 w:0)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	/// Storage: `Asset::Assets` (r:1 w:1)
	/// Proof: `Asset::Assets` (`max_values`: None, `max_size`: Some(4178), added: 6653, mode: `MaxEncodedLen`)
	/// Storage: `Asset::AssetCount` (r:1 w:1)
	/// Proof: `Asset::AssetCount` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn create_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `87`
		//  Estimated: `7643`
		// Minimum execution time: 80_380_000 picoseconds.
		Weight::from_parts(84_512_000, 0)
			.saturating_add(Weight::from_parts(0, 7643))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Asset::Classes` (r:1 w:0)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	/// Storage: `Asset::Balances` (r:1 w:1)
	/// Proof: `Asset::Balances` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `7619`
		// Minimum execution time: 66_886_000 picoseconds.
		Weight::from_parts(72_257_000, 0)
			.saturating_add(Weight::from_parts(0, 7619))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Asset::Classes` (r:1 w:0)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	/// Storage: `Asset::Balances` (r:3 w:3)
	/// Proof: `Asset::Balances` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	fn batch_mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `159`
		//  Estimated: `8751`
		// Minimum execution time: 111_541_000 picoseconds.
		Weight::from_parts(130_368_000, 0)
			.saturating_add(Weight::from_parts(0, 8751))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Asset::Classes` (r:1 w:0)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	/// Storage: `Asset::Balances` (r:1 w:1)
	/// Proof: `Asset::Balances` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293`
		//  Estimated: `7619`
		// Minimum execution time: 87_207_000 picoseconds.
		Weight::from_parts(96_788_000, 0)
			.saturating_add(Weight::from_parts(0, 7619))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Asset::Classes` (r:1 w:0)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	/// Storage: `Asset::Balances` (r:3 w:3)
	/// Proof: `Asset::Balances` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	fn batch_burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `386`
		//  Estimated: `8751`
		// Minimum execution time: 156_058_000 picoseconds.
		Weight::from_parts(162_382_000, 0)
			.saturating_add(Weight::from_parts(0, 8751))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Asset::Classes` (r:1 w:0)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	/// Storage: `Asset::Balances` (r:2 w:2)
	/// Proof: `Asset::Balances` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	fn transfer_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `293`
		//  Estimated: `7619`
		// Minimum execution time: 116_897_000 picoseconds.
		Weight::from_parts(122_613_000, 0)
			.saturating_add(Weight::from_parts(0, 7619))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Asset::Classes` (r:1 w:0)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	/// Storage: `Asset::Balances` (r:6 w:6)
	/// Proof: `Asset::Balances` (`max_values`: None, `max_size`: Some(112), added: 2587, mode: `MaxEncodedLen`)
	fn batch_transfer_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `386`
		//  Estimated: `16512`
		// Minimum execution time: 221_324_000 picoseconds.
		Weight::from_parts(244_451_000, 0)
			.saturating_add(Weight::from_parts(0, 16512))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Asset::Classes` (r:1 w:1)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	fn update_class_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `87`
		//  Estimated: `7619`
		// Minimum execution time: 59_227_000 picoseconds.
		Weight::from_parts(65_752_000, 0)
			.saturating_add(Weight::from_parts(0, 7619))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Asset::Classes` (r:1 w:0)
	/// Proof: `Asset::Classes` (`max_values`: None, `max_size`: Some(4154), added: 6629, mode: `MaxEncodedLen`)
	/// Storage: `Asset::Assets` (r:1 w:1)
	/// Proof: `Asset::Assets` (`max_values`: None, `max_size`: Some(4178), added: 6653, mode: `MaxEncodedLen`)
	fn update_asset_metadata() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `230`
		//  Estimated: `7643`
		// Minimum execution time: 89_112_000 picoseconds.
		Weight::from_parts(98_037_000, 0)
			.saturating_add(Weight::from_parts(0, 7643))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
